#include <Ice/Ice.h>
#include "Joystick.h"  // Generated by slice2cpp
#include <iostream>

int main(int argc, char* argv[]) {
    try {
        Ice::CommunicatorPtr communicator = Ice::initialize(argc, argv);
        Ice::ObjectPrx base = communicator->stringToProxy("carData:tcp -h 127.0.0.1 -p 10000");

        Data::CarDataPrx carData = Data::CarDataPrx::checkedCast(base);
        if (!carData) {
            throw std::runtime_error("Invalid proxy");
        }

        // Set joystick state
        carData->setJoystickValue(true);
        std::cout << "Joystick state set to: true" << std::endl;

        // Get joystick state
        bool joystickState = carData->getJoystickValue();
        std::cout << "Joystick state retrieved: " << joystickState << std::endl;

        // Set car temperature value
        carData->setCarTemperatureValue(22.5);
        std::cout << "Car temperature set to: 22.5" << std::endl;

        // Get car temperature value
        double carTempState = carData->getCarTemperatureValue();
        std::cout << "Car temperature state retrieved: " << carTempState << std::endl;

        communicator->destroy();
    }
    catch (const Ice::Exception& e) {
        std::cerr << e.what() << std::endl;
        return 1;
    }
}
