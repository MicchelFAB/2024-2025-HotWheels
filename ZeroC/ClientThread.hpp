#ifndef CLIENT_THREAD_HPP
#define CLIENT_THREAD_HPP

#include "Joystick.h" // Generated by slice2cpp
#include <Ice/Ice.h>
#include <QObject>
#include <condition_variable>
#include <iostream>
#include <mutex>
#include <thread>

class ClientThread : public QObject {
  Q_OBJECT

private:
  Ice::CommunicatorPtr communicator;
  Ice::ObjectPrx base;
  Data::CarDataPrx carData; // Proxy to communicate with the server
  std::thread clientThread;
  bool running = true;
  bool connected = false;     // Flag to check if the client is connected
  std::mutex mtx;             // Mutex for synchronization
  std::condition_variable cv; // Condition variable for synchronization

public:
  explicit ClientThread(QObject *parent = nullptr);

  ~ClientThread();

  void runClient(int argc, char *argv[]);

  void setJoystickValue(bool value);
  bool getJoystickValue();

  void setRunning(bool value);
};

#endif
