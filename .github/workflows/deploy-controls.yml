name: Cross-Compile Car Controls to aarch64

on:
  push:
    branches:
      - test-coverage
    paths:
      - 'apps/car_controls/**'
      - 'ZeroMQ/**'
  pull_request:
    branches:
      - test-coverage
    paths:
      - 'apps/car_controls/**'
      - 'ZeroMQ/**'

env:
  DIR: apps/car_controls

jobs:
  compile-and-test:
    runs-on: [self-hosted, seame-computer-1]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build executable
        run: |
          cd $DIR
          mkdir build
          cd build
          ~/new_qtjetson/qt5.15/bin/qmake ../car-controls-qt.pro
          make -j$(nproc)
          rm -rf *.o

      - name: Build tests
        run: |
          cd $DIR/build
          qmake ../car-controls-tests.pro
          make -j$(nproc)

      - name: Run tests
        run: |
          cd $DIR/build
          ./car-controls-tests

      - name: Deploy executable to target
        env:
          SSHPASS: ${{ secrets.JETSON_PASSWORD }}
        run: |
          sshpass -e rsync -avz --rsync-path="sudo rsync" --delete $DIR/build/car-controls-qt jetson@100.108.203.64:/home/jetson/apps/test

  coverage-report:
    needs: compile-and-test
    runs-on: [self-hosted, seame-computer-1]
    steps:
      - name: Generate coverage report
        run: |
          cd $DIR/build
          lcov --capture --directory . --output-file full.info
          lcov --remove full.info     '*/moc_*.cpp'     '*/moc_*.gcda'     '*/moc_*.gcno'     '*/tests*' '*/tensorrt-8.6.1.6*'     '*/Mock*'     '*/usr/*'     '*/Qt*'     --output-file filtered.info
          genhtml filtered.info --output-directory coverage-car-controls

      - name: Push coverage report to docPage branch
        run: |
          # Create a temporary working directory
          mkdir temp-docs
          cd temp-docs

          # Clone the docPage branch
          git clone --branch docPage https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} .

          # Optional: clear existing folder if you want to fully overwrite it
          rm -rf coverage-car-controls

          # Copy in the new coverage report
          cp -r ../$DIR/build/coverage-car-controls ./coverage-car-controls

          # Commit and push
          git add .
          git commit -m "Update coverage report from $GITHUB_SHA" || echo "No changes to commit"
          git push
